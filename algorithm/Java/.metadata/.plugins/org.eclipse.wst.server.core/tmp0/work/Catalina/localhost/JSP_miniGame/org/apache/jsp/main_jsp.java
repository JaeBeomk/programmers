/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.23
 * Generated at: 2022-11-20 08:07:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import dao.Udao;
import dto.User;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dao.Udao");
    _jspx_imports_classes.add("dto.User");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
request.setCharacterEncoding("utf-8"); 
      out.write('\r');
      out.write('\n');
      dto.User user = null;
      user = (dto.User) _jspx_page_context.getAttribute("user", jakarta.servlet.jsp.PageContext.PAGE_SCOPE);
      if (user == null){
        user = new dto.User();
        _jspx_page_context.setAttribute("user", user, jakarta.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("user"), "userID", request.getParameter("userID"), request, "userID", false);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("user"), "userPassword", request.getParameter("userPassword"), request, "userPassword", false);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("user"), "userName", request.getParameter("userName"), request, "userName", false);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("user"), "userGender", request.getParameter("userGender"), request, "userGender", false);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("user"), "userEmail", request.getParameter("userEmail"), request, "userEmail", false);
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<!-- CSS only -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/bootstrap.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/custom.css\">\r\n");
      out.write("<title>miniGameboard</title>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("		");
 
		//현재 세션 상태 체크
		String userID=null;
		if(session.getAttribute("userID")!=null){
			userID=(String)session.getAttribute("userID");
		}
		
      out.write("\r\n");
      out.write("	<nav class=\"navbar navbar-default\">\r\n");
      out.write("		<div class=\"navbar-header\">\r\n");
      out.write("			<button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\" aria-expanded=\"false\">\r\n");
      out.write("			<span class=\"icon-bar\"></span>\r\n");
      out.write("			<span class=\"icon-bar\"></span>\r\n");
      out.write("			<span class=\"icon-bar\"></span>\r\n");
      out.write("			</button>\r\n");
      out.write("			<a class=\"navbar-brand\" href=\"main.jsp\">jsp 게시판웹</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n");
      out.write("			<ul class=\"nav navbar-nav\">\r\n");
      out.write("				<li class=\"active\"><a href=\"main.jsp\">메인</a></li>\r\n");
      out.write("				<li><a href=\"./bbs.jsp\">게시판</a></li>\r\n");
      out.write("				\r\n");
      out.write("			</ul>\r\n");
      out.write("			");

				//로그인 하지 않았을때
				if(userID==null){
					
					//헤더 우측 영역
				
			
      out.write("\r\n");
      out.write("			<ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("				<li class=\"dropdown\">\r\n");
      out.write("					<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">접속하기\r\n");
      out.write("					<span class=\"caret\"></span></a>\r\n");
      out.write("					<!-- 드랍다운 아이템 영역-->\r\n");
      out.write("					<ul class=\"dropdown-menu\">\r\n");
      out.write("						<li><a href=\"login.jsp\">로그인</a></li>\r\n");
      out.write("						<li><a href=\"join.jsp\">회원가입</a></li>\r\n");
      out.write("					\r\n");
      out.write("					</ul>\r\n");
      out.write("				</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("		</div>\r\n");
      out.write("	</nav>\r\n");
      out.write("<!-- 꾸며줄 공간의 div태그를 하나 구현해 준다. -->\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<!-- 일반적으로 웹사이트를 소개하는 영역이 있는데 그것을 바로 jumbotron이라고 부른다, bootstrap에서 제공하는 요소이다. -->\r\n");
      out.write("		<div class=\"jumbotron\">\r\n");
      out.write("			<!-- 공간의 제목 -->\r\n");
      out.write("			<h1>김재범의 웹사이트</h1>\r\n");
      out.write("			<!-- 내용 -->\r\n");
      out.write("			<p>안녕하세요 김재범 입니다.<br>\r\n");
      out.write("			배운 내용을 토대로 간단한 미니게임을 만들었으니<br>\r\n");
      out.write("			 의견은 게시판에 남겨주세요!<br>\r\n");
      out.write("			 (게임은 로그인시 이용가능합니다.)</p>\r\n");
      out.write("			<!-- p태그로 감싸서 a태그로 디자인용 button을 하나만든다. 하나쯤 있는게 이쁘기때문에. -->\r\n");
      out.write("			<p><a class=\"btn btn-primary btn-pull\" href=\"https://blog.naver.com/kimjm3435\" role=\"button\">자세히 알아보기</a></p>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("			");

			// 로그인시 보여주는 화면
			}else{
				
			
			
      out.write("\r\n");
      out.write("			<ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("				<li class=\"dropdown\">\r\n");
      out.write("					<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">회원관리\r\n");
      out.write("					<span class=\"caret\"></span></a>\r\n");
      out.write("					<!-- 드랍다운 아이템 영역-->\r\n");
      out.write("					<ul class=\"dropdown-menu\">\r\n");
      out.write("						<li><a href=\"uUpdateform.jsp?userID=");
      out.print(userID);
      out.write("\">회원수정</a></li>\r\n");
      out.write("						<li><a onclick=\"return confirm('정말 삭제하시겠습니까?')\" href=\"");
      out.print(request.getContextPath() );
      out.write("/uDeleteAction.jsp?userID=");
      out.print( userID );
      out.write("\">회원삭제</a></li>\r\n");
      out.write("						<li><a href=\"logoutAction.jsp\">로그아웃</a></li>\r\n");
      out.write("					</ul>\r\n");
      out.write("				</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("		</div>\r\n");
      out.write("	</nav>\r\n");
      out.write("<!-- 꾸며줄 공간의 div태그를 하나 구현해 준다. -->\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<!-- 일반적으로 웹사이트를 소개하는 영역이 있는데 그것을 바로 jumbotron이라고 부른다, bootstrap에서 제공하는 요소이다. -->\r\n");
      out.write("		<div class=\"jumbotron\">\r\n");
      out.write("			<!-- 공간의 제목 -->\r\n");
      out.write("			<h1>김재범의 웹사이트</h1>\r\n");
      out.write("			<!-- 내용 -->\r\n");
      out.write("			<p>안녕하세요 김재범 입니다.<br>\r\n");
      out.write("			배운 내용을 토대로 간단한 미니게임을 만들었으니<br>\r\n");
      out.write("			 의견은 게시판에 남겨주세요!</p>\r\n");
      out.write("			<!-- p태그로 감싸서 a태그로 디자인용 button을 하나만든다. 하나쯤 있는게 이쁘기때문에. -->\r\n");
      out.write("			<p><a class=\"btn btn-primary btn-pull\" href=\"https://blog.naver.com/kimjm3435\" role=\"button\">자세히 알아보기</a></p>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<!-- 사진을 넣을 공간을 div로 구현해 준다. -->\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<!-- 공간의id는 myCarousel = 사진첩이라고 할 수 있다. -->\r\n");
      out.write("		<div id=\"myCarousel\" class=\"carousel slide\" data-rid=\"carousel\">\r\n");
      out.write("			<!-- ol태그는 번호를 앞에 붙여 목록을 만드는 형식이다. 지시자를 구현해 준다.-->\r\n");
      out.write("			<ol class=\"carousel-indicators\">\r\n");
      out.write("				<!-- 넣을 이미지가 3개 이기때문에, 3개를 넣어주고 맨 처음보여줄 부분에 active를 붙여준다. -->\r\n");
      out.write("				<li data-target=\"#myCarousel\" data-slice-to=\"0\" class=\"active\"></li>\r\n");
      out.write("				<li data-target=\"#myCarousel\" data-slice-to=\"1\"></li>\r\n");
      out.write("				<li data-target=\"#myCarousel\" data-slice-to=\"2\"></li>\r\n");
      out.write("			</ol>\r\n");
      out.write("			<!-- 실질적으로 이미지가 들어 갈 수있는 부분을 구현해 준다.  -->\r\n");
      out.write("			<div class=\"carousel-inner\" >\r\n");
      out.write("				<!-- 현재 선택이 되어있는 사진을 보여준다, -->\r\n");
      out.write("				<div class=\"item active\" >\r\n");
      out.write("					<!-- images파일 안에있는 1이라는 사진을 가져온다 -->\r\n");
      out.write("					<center><a href=\"tetris/tetris.html\">테트리스<img src=\"images/1.PNG\"></a></center>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"item\">\r\n");
      out.write("					<center><a href=\"2048/2048.html\">2048<img src=\"images/2.PNG\"></a></center>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"item\">\r\n");
      out.write("					<center><a href=\"mathBaseball/Baseball.html\">숫자야구<img src=\"images/3.PNG\"></a></center>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<!-- 이제 사진을 양 옆으로 넘길 수 있는 버튼을 구현 해준다. -->\r\n");
      out.write("			<a class=\"left carousel-control\" href=\"#myCarousel\" data-slide=\"prev\">\r\n");
      out.write("				<!-- 버튼 내에 이모티콘을 구현해 준다. -->\r\n");
      out.write("				<span class=\"glyphicon glyphicon-chevron-left\"></span>\r\n");
      out.write("			<!-- 이러면 아이콘으로 된 버튼의 왼쪽으로 옮기는 버튼 구현이 끝났다. -->\r\n");
      out.write("			</a> \r\n");
      out.write("			<a class=\"right carousel-control\" href=\"#myCarousel\" data-slide=\"next\"> \r\n");
      out.write("			<span class=\"glyphicon glyphicon-chevron-right\"></span>\r\n");
      out.write("			</a>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("			");

			}
			
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- JavaScript Bundle with Popper -->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\r\n");
      out.write("<script src=\"js/bootstrap.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
