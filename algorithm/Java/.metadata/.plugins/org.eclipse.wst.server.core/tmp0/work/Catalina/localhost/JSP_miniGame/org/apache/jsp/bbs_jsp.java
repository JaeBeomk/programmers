/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.23
 * Generated at: 2022-11-20 08:37:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.io.PrintWriter;
import bbs.BbsDAO;
import bbs.Bbs;
import java.util.ArrayList;

public final class bbs_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("bbs.Bbs");
    _jspx_imports_classes.add("bbs.BbsDAO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width\", initial-scale=\"1\" >  <!-- 반응형 웹에 사용하는 메타태그 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/bootstrap.css\"> <!-- 참조  -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/custom.css\">\r\n");
      out.write("<title>JSP 게시판 웹 사이트</title>\r\n");
      out.write("<style type = \"text/css\">\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

    String userID = null; // 로그인이 된 사람들은 로그인정보를 담을 수 있도록한다
    if (session.getAttribute("userID") != null)
    {
        userID = (String)session.getAttribute("userID");
    }
  //기본적으로 페이지 1부터선언
    int pageNumber = 1; 
	 //만약에 파라미터로 pageNumber가 넘어왔다면 해당 파라미터의 값을 넣어주도록 한다.
    if (request.getParameter("pageNumber") != null)
    {
    	//파라미터는 항상 정수형으로 바꿔주는 parseInt를 사용해야 한다.
        pageNumber = Integer.parseInt(request.getParameter("pageNumber"));
    }
 

      out.write("\r\n");
      out.write("	<!-- 웹사이트 공통메뉴 -->\r\n");
      out.write("    <nav class =\"navbar navbar-default\">\r\n");
      out.write("        <div class=\"navbar-header\"> <!-- 홈페이지의 로고 -->\r\n");
      out.write("            <button type=\"button\" class=\"navbar-toggle collapsed\"\r\n");
      out.write("                data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\"\r\n");
      out.write("                aria-expand=\"false\">\r\n");
      out.write("                <span class =\"icon-bar\"></span><!-- 줄였을때 옆에 짝대기 -->\r\n");
      out.write("                <span class =\"icon-bar\"></span>\r\n");
      out.write("                <span class =\"icon-bar\"></span>\r\n");
      out.write("            </button>\r\n");
      out.write("            <a class =\"navbar-brand\" href=\"main.jsp\">JSP 게시판 웹 사이트</a>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n");
      out.write("            <ul class=\"nav navbar-nav\">\r\n");
      out.write("                <li><a href=\"main.jsp\">메인</a></li>\r\n");
      out.write("                <!-- 현재의 게시판 화면이라는 것을 사용자에게 보여주는 부분 -->\r\n");
      out.write("                <li class=\"active\"><a href=\"bbs.jsp\">게시판</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("            ");

            // 접속하기는 로그인이 되어있지 않은 경우만 나오게한다
                if(userID == null)
                {
            
      out.write("\r\n");
      out.write("            <ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("                <li class=\"dropdown\">\r\n");
      out.write("                <a href=\"#\" class = \"dropdown-toggle\"\r\n");
      out.write("                    data-toggle=\"dropdown\" role =\"button\" aria-haspopup=\"true\"\r\n");
      out.write("                    aria-expanded=\"false\">접속하기<span class=\"caret\"></span></a>\r\n");
      out.write("                    <ul class=\"dropdown-menu\">\r\n");
      out.write("                        <li><a href=\"login.jsp\">로그인</a></li>\r\n");
      out.write("                        <li><a href=\"join.jsp\">회원가입</a></li>                    \r\n");
      out.write("                    </ul>\r\n");
      out.write("                </li>\r\n");
      out.write("            </ul>\r\n");
      out.write("            ");

            // 로그인이 되어있는 사람만 볼수 있는 화면
                } else {
            
      out.write("\r\n");
      out.write("            <ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("                <li class=\"dropdown\">\r\n");
      out.write("                <a href=\"#\" class = \"dropdown-toggle\"\r\n");
      out.write("                    data-toggle=\"dropdown\" role =\"button\" aria-haspopup=\"true\"\r\n");
      out.write("                    aria-expanded=\"false\">회원관리<span class=\"caret\"></span></a>\r\n");
      out.write("                    <ul class=\"dropdown-menu\">\r\n");
      out.write("                        <li><a href=\"loginAction.jsp\">로그아웃</a></li>\r\n");
      out.write("                    </ul>\r\n");
      out.write("                </li>\r\n");
      out.write("            </ul>\r\n");
      out.write("            ");

                }
            
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </nav>\r\n");
      out.write("    <!-- 특정한 내용들을 담을 공간을 확보 해준다.-->\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <!-- 테이블이 들어갈 수 있는 공간 구현 -->\r\n");
      out.write("        <div class=\"row\">\r\n");
      out.write("         	<!-- striped는 게시판 글목록을 홀수와 짝수로 번갈아가며 색이 변하게 해주는 하나의 요소  -->\r\n");
      out.write("            <table class=\"table table-striped\" style=\"text-align:center; border:1px solid #dddddd\">\r\n");
      out.write("                <!-- thead는 테이블의 제목부분에 해당함 -->\r\n");
      out.write("                <thead>\r\n");
      out.write("                	<!-- 테이블의 하나의 행을 말함(한 줄)-->\r\n");
      out.write("                    <tr>\r\n");
      out.write("                    	<!-- 게시판의 속성을 하나씩 명시 해준다. -->\r\n");
      out.write("                        <th style=\"background-color:#eeeeee; text-align:center;\">번호</th>\r\n");
      out.write("                        <th style=\"background-color:#eeeeee; text-align:center;\">제목</th>\r\n");
      out.write("                        <th style=\"background-color:#eeeeee; text-align:center;\">작성자</th>\r\n");
      out.write("                        <th style=\"background-color:#eeeeee; text-align:center;\">작성일</th>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                </thead>\r\n");
      out.write("                <!-- tbody 같은 경우는 위에 지정해준 속성 아래에 하나씩 출력해주는 역할 -->\r\n");
      out.write("                <tbody>\r\n");
      out.write("                <!--임시 데이터 삽입 -->\r\n");
      out.write("              		\r\n");
      out.write("                    	                ");

                	//게시글을 담을 인스턴스
                    BbsDAO bbsDAO = new BbsDAO();
                	//list 생성 그 값은 현재의 페이지에서 가져온 리스트 게시글목록
                    ArrayList<Bbs> list = bbsDAO.getList(pageNumber);
                    //가져온 목록을 하나씩 출력하도록 선언한다..
                	for(int i = 0; i < list.size(); i++)
                    {
                
      out.write("\r\n");
      out.write("                <!-- 실제 데이터를 사용자에게 보여주는 부분 -->\r\n");
      out.write("                    <tr>\r\n");
      out.write("                    	<!-- 현재의 게시글에 대한 정보를 하나씩 데이터를 데이터베이스에서 불러와서 보여준다. -->\r\n");
      out.write("                        <td>");
      out.print(list.get(i).getBbsID() );
      out.write("</td>\r\n");
      out.write("                        <!-- 제목을 눌렀을때는 해당 게시글의 내용을 보여주는 페이지로 이동해야하기때문에\r\n");
      out.write("                         view.jsp페이지로 해당 게시글번호를 매개변수로 보내서 처리한다. href=\"주소?변수명 = 값! 이런식으로 처리를 해준다.-->\r\n");
      out.write("                        <td><a href=\"view.jsp?bbsID=");
      out.print(list.get(i).getBbsID());
      out.write('"');
      out.write('>');
      out.print(list.get(i).getBbsTitle() );
      out.write("</a></td>\r\n");
      out.write("                        <td>");
      out.print(list.get(i).getUserID() );
      out.write("</td>\r\n");
      out.write("                        <!--날짜 데이터를 가져오는것은 substring(index,index) 함수는 DB내부에서 필요한 정보만 잘라서 들고오게 해 주는 함수-->\r\n");
      out.write("                        <td>");
      out.print(list.get(i).getBbsDate().substring(0,11) + list.get(i).getBbsDate().substring(11, 13) + "시" 
                        + list.get(i).getBbsDate().substring(14,16) + "분" );
      out.write("</td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                ");

                    }
                
      out.write("\r\n");
      out.write("                </tbody>\r\n");
      out.write("            </table>\r\n");
      out.write("            ");

            	//테이블 밑에 이전 버튼과 다음 버튼을 구현해 주는 부분
                if(pageNumber != 1) {
            
      out.write("\r\n");
      out.write("            	<!--페이지넘버가 1이 아니면 전부다 2페이지 이상이기 때문에 pageN에서 1을뺀값을 넣어서 게시판\r\n");
      out.write("            	 메인화면으로 이동하게 한다. class내부 에는 화살표모양으로 버튼이 생기게 하는 소스작성 아마 부트스트랩 기능인듯.-->\r\n");
      out.write("                <a href=\"bbs.jsp?pageNumber=");
      out.print(pageNumber - 1 );
      out.write("\" class=\"btn btn-success btn-arrow-left\">이전</a>\r\n");
      out.write("            ");

            	//BbsDAO에서 만들었던 함수를 이용해서, 다음페이지가 존재 할 경우
                } if (bbsDAO.nextPage(pageNumber + 1)) {
            
      out.write("\r\n");
      out.write("            	<!-- a태그를 이용해서 다음페이지로 넘어 갈 수있는 버튼을 만들어 준다. -->\r\n");
      out.write("                <a href=\"bbs.jsp?pageNumber=");
      out.print(pageNumber + 1 );
      out.write("\" class=\"btn btn-success btn-arrow-left\">다음</a>\r\n");
      out.write("            ");

                }
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("                </tbody>\r\n");
      out.write("            </table>\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("          \r\n");
      out.write("            <!-- 테이블 자체는 글의 목록을 보여주는 역할밖에 하지않는다. 글을 쓸수있는 화면으로 넘어갈 수 있는 태그 설정-->\r\n");
      out.write("            <a href=\"write.jsp\" class=\"btn btn-primary pull-right\">글쓰기</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\r\n");
      out.write("    <script src=\"js/bootstrap.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
